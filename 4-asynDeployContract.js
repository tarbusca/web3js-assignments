var Tx = require('ethereumjs-tx');
const Web3 = require('web3')
const web3 = new Web3('https://ropsten.infura.io/v3/16c1a9ae02fc4856b28f116d862acc69');
require("dotenv").config();
const account1 = '0x956927273De0C7908dbD850aAaa35f7D36264A91' 


//byteCode = '0x608060405234801561001057600080fd5b506104d5806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806330b2a6101461003b578063420bb94d1461006b575b600080fd5b6100556004803603810190610050919061019c565b61009b565b6040516100629190610321565b60405180910390f35b61008560048036038101906100809190610208565b6100b6565b604051610092919061033c565b60405180910390f35b60008180519060200120838051906020012014905092915050565b606060006040518060400160405280600181526020017f20000000000000000000000000000000000000000000000000000000000000008152509050838184604051602001610107939291906102ec565b60405160208183030381529060405291505092915050565b600061013261012d8461038f565b61035e565b90508281526020810184848401111561014a57600080fd5b6101558482856103fc565b509392505050565b600082601f83011261016e57600080fd5b813561017e84826020860161011f565b91505092915050565b60008135905061019681610488565b92915050565b600080604083850312156101af57600080fd5b600083013567ffffffffffffffff8111156101c957600080fd5b6101d58582860161015d565b925050602083013567ffffffffffffffff8111156101f257600080fd5b6101fe8582860161015d565b9150509250929050565b6000806040838503121561021b57600080fd5b600083013567ffffffffffffffff81111561023557600080fd5b6102418582860161015d565b925050602061025285828601610187565b9150509250929050565b610265816103e6565b82525050565b6000610276826103bf565b61028081856103ca565b935061029081856020860161040b565b61029981610477565b840191505092915050565b60006102af826103bf565b6102b981856103db565b93506102c981856020860161040b565b80840191505092915050565b6102e66102e1826103f2565b61043e565b82525050565b60006102f882866102a4565b915061030482856102a4565b915061031082846102d5565b602082019150819050949350505050565b6000602082019050610336600083018461025c565b92915050565b60006020820190508181036000830152610356818461026b565b905092915050565b6000604051905081810181811067ffffffffffffffff8211171561038557610384610448565b5b8060405250919050565b600067ffffffffffffffff8211156103aa576103a9610448565b5b601f19601f8301169050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b60008115159050919050565b6000819050919050565b82818337600083830152505050565b60005b8381101561042957808201518184015260208101905061040e565b83811115610438576000848401525b50505050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b610491816103f2565b811461049c57600080fd5b5056fea2646970667358221220e5bdaf8f72af9ce351108f57246b3579942a013bceb9abe2e8e2e0726795c2a564736f6c63430008000033'
byteCode = "0x608060405234801561001057600080fd5b50610426806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806330b2a6101461003b578063500a4acf1461006b575b600080fd5b61005560048036038101906100509190610187565b61009b565b604051610062919061029d565b60405180910390f35b61008560048036038101906100809190610187565b6100b6565b60405161009291906102b8565b60405180910390f35b60008180519060200120838051906020012014905092915050565b606060006040518060400160405280600181526020017f200000000000000000000000000000000000000000000000000000000000000081525090508381846040516020016101079392919061026c565b60405160208183030381529060405291505092915050565b600061013261012d8461030b565b6102da565b90508281526020810184848401111561014a57600080fd5b61015584828561036e565b509392505050565b600082601f83011261016e57600080fd5b813561017e84826020860161011f565b91505092915050565b6000806040838503121561019a57600080fd5b600083013567ffffffffffffffff8111156101b457600080fd5b6101c08582860161015d565b925050602083013567ffffffffffffffff8111156101dd57600080fd5b6101e98582860161015d565b9150509250929050565b6101fc81610362565b82525050565b600061020d8261033b565b6102178185610346565b935061022781856020860161037d565b610230816103df565b840191505092915050565b60006102468261033b565b6102508185610357565b935061026081856020860161037d565b80840191505092915050565b6000610278828661023b565b9150610284828561023b565b9150610290828461023b565b9150819050949350505050565b60006020820190506102b260008301846101f3565b92915050565b600060208201905081810360008301526102d28184610202565b905092915050565b6000604051905081810181811067ffffffffffffffff82111715610301576103006103b0565b5b8060405250919050565b600067ffffffffffffffff821115610326576103256103b0565b5b601f19601f8301169050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b60008115159050919050565b82818337600083830152505050565b60005b8381101561039b578082015181840152602081019050610380565b838111156103aa576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f830116905091905056fea26469706673582212207a104eb618c6dfe2c624058fd4d9ce809d052e303d11e162863e248e455d677e64736f6c63430008000033";

const account1PK = Buffer.from(process.env.PRIVATE_KEY, 'hex');

const contractDeployAsync = async() => {
    try{
        let txCount = await web3.eth.getTransactionCount(account1);
        const txObject = {
            nonce:    web3.utils.toHex(txCount),
            gasLimit: web3.utils.toHex(5000000), // Raise the gas limit to a much higher amount
            gasPrice: web3.utils.toHex(web3.utils.toWei("10", "gwei")),
            data: byteCode
          }
        const tx = new Tx.Transaction(txObject, { chain: "ropsten"});
        tx.sign(account1PK);
        const serializedTx = tx.serialize();
        const raw = '0x' + serializedTx.toString('hex');
        let signedTransaction= await web3.eth.sendSignedTransaction(raw);
        
        console.log("Signed Transaction:",signedTransaction);
   

    } catch(error) {
        console.log("Errors :" , error);
    }
} 
contractDeployAsync()